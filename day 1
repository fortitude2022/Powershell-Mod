History:
	Cmd prompt fist windows shell
	MSDOS
	
	OS Kernel
		Application
			DCOM - translate what you type in cmd
		---->(conhost would be implemented ehre)
				cmd
					initially limited capability
					later increase capbty with DCOM
			^^	conhost (technically the SHELL)
					somewhat replaced DCOM
					
			Powershellv1 Introduced in 2003/XP
				initially glorified cmd prompt w/ color change
				still used conhost
				GOES STRAIGHT TO KERNEL, bypass DCOM and App
				^ means its highly exploitable
				
			.Net
				MS programming framework
				Kernel is made out of

PS (C#) -> Conhost -> .Net -> Kernel
RAM intensive

Powershell v5.1 Win10 and newer
	encoded commands will be translated and log
	can be worked around
	
Open source powershell core
	v6 and v7
	v6
		took away from v5 but made compat with most linux distros and apple iOS
	v7
		v6 but with more capablt like v5.1
	
#get-help git-gud

<#
for ($x in $y) {
    do something
   }
#>


#execute as a single line 
@'
do this
get that
exploit-russia
'@


get-help get-help


ctrl+arrow key goes word hy word, Home button goes to head of line


Why powershell is powerfull

everything runs off the kernel
they made a pseudo-kernel (.Net) to defend the Kernel

Powershell is kernel level application
	PoSh 
	can request direct access to kernel w/o going through the .Net pseudo-kernel
	
	limited via execution policies;
	policy tells ps what it can/cannot do 
	restricted by default
	access w/ Get-ExecutionPolicy
	
	signing
	
	remote signing
		script signed by foreign computer
		
	
Get-Help
Update-Help -Force -ErrorAction SilentlyContinue

use Get-Help Verb-Noun -online for ms online support
search cmdlets with docs after to find ms docs on it

syntax can be shortened

argument value pass thru param
switch is a boolean argument thats true if present

Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope LocalMachine
	this sets a Restricted policy on the local machine
Set-ExecutionPolicy Unrestricted -Force
	sets it to unr
	
Get-Help *firewall*
	keyword seach with Get-Help cmdlet
	
Get-Command -Name *process*
Get-Verb -Verb *get*
Get-Command -noun wmi*
# asterisk* placement matters
Get-Command -verb get -noun wmi*
#searches for get commands starting with wmi

get-help about_arrays
#gets help on arrays in ps

get-help Get-Service

	cmdlet is listed 3 times
	each one is a param set
		diff params for each set

Get-ChildItem -Path C:\ -Filter *.evil -Recurse -Name
# get CIs in C drive, recursice search; print the name

Swtich parameters:
	-On or Off
	-only way its turned on is if its with that switch
	-does not accept arguments
	-Recurse above
Positional Params:
	- call it or omit
	- on omit:
		ps will look for arguments
		will look at first argument and assume 
		(will go over later in functions)
	- -Path is pos param for Get-CItem
	- C:\ is the argument passed to the Param

Common Params:
	- set to every single cmdlet 
	- -Name in above

Aliases exist for cmdlets
	often paired with linux cmds
	
get-item alias:*
gets all aliases 

get-alias -Name <cmd>
gets cmdlet of an alias
get-alias gi
shows get-item cmdlet

common:
% ForEach-Object

create an alias:

New-Alias -Name <alias> -Value <cmdlet; can be extended with options>
called with invoke-command <name>

Set-Alias is better
	setting something that doesnt exist will create it
	can also OVERWRTIE pre existing aliases

Aliases only exist for that ps session

Can be saved with $profile

$profile.
All user All host
A u C h
C u A h
Current u Current h

Add-Content -Path $profile.AllUsersAllHosts -Value "set-alias -Name <alias> -Value <cmdlet>"
this saves an alias to the $profile AllUsersAllHosts

Remove-item alias:<alias>

VARIABLES:

$ used both for declaring AND using, at all times
	Python		Bash		PS
Inst	Free		Free		$pay

Call	Free		$pay		$pay
#way to remember how to use $ for variables

$money = 'all of it'
#^ instantiate

$money
#^ call

obj types:

$variable.GetType()
#method to determine

STRING: anything in quotes
Integer / Int32 : number
Float / Double (Integer) : decimal number, no quotes/tcasting needed

Must compare likes with likes

([string]$money).GetType()
# method used to typecast; GetType is just used to test it

-Anything in parethesis will run first just like in PEMDAS

- Method = an action you can run against an object

Integers --> Strings
Strings -->X Integers
	string must consist of only a number, otherwise it will not work

[typecast]$var can be used when instantiating a variable
 char and byte also work but very rare unless you are working with packet manipulation or steganography
 
 [datetime] date typecast
 use it when differentiating against a division or subtraction command as to not confuse PS
 
 you can also give PS a hex value 0xABCDE and it will be able to translate it for you mathematically
 
 variable substitution:
 
 $replace = "all work and no play makes jack a dull boy"
 
 Write-Host $replace # prints to scr
 
 Write-Host $replace "that are not broken"
 # will cat the two together
 
 $truth = "$replace that are not broken"
 
 $truth # prints catted string
 
 $service = Get-Service
 # calling the variable will run the command and the output will be stored into that variable
 
$service = $(Get-Service)
# wont hold data, it will execute upon every call to that variable
VARIABLES are only stored in the current session, released upon exit of script and/or function

Get-ChildItem variable:*
# prints all variables, to include built in vars

Environmental variables:
Variables owned/maint/updtd by OS
	refreshed by OS
	
	-Stored under env
Get-ChildItem env:*
#outputs all envars

new-item $env:SystemDrive -ItemType File -Name petya.exe

ls $env:Path
#doesnt work as is

Automatic vars:
	owned by PS
	decl on PS start
	
$$ is last token used
$? is execution status of last command (whether it executed successfully or not)
$^ is first token used in last operation
$_ is current object in current pipeline
	good for loops
$PSItem = $_
	same but good to use one or other depending on circumstance
$args is array of undeclared parameters
$input is enumeration of all current parameters passed to a function
# plenty more than just these, online resources available

$null is NOTHING
	used to compare an item to this
	can also be used to nullify/zero-out a variable
$true is literally just True
	good for booleans
$false is False
	good for bools
$profile 
	AUTOMATIC variable
	path to profile
$profile.All/CurrentUsersA/CHosts 


ARRAYS:

object that holds multiple values:

$array = @() # decl of an empty array

[array]$more_arrays = $null # same as above, decl empty array

$number_array = 1, 2, 3, 4, 5, 6, 7, 8, 9

$seq_numbers = 1..10 # similar to bash {range} 

$seq_numbers[3] # gets number at index 3

$seq_numbers | select -Index 3 # gets num at index 3

Nested/Jagged Arrays:
$matryoshka = 12, 30, $other_array, 69
$matryoshka[2][1] # will look into index 2 array and grab that array's index 1 value

Multidimensional Array:
Array-ception multiple layers deep

$inception = tri, square, $matryoshka, cir

STRING ARRAYS:

Polymorhpich arrays: # contain values of different types like str AND int together



$unclass[2]
$unclass | select -Index 2
$unclass.count-1
















